{"ast":null,"code":"var _jsxFileName = \"C:\\\\sharpner react code\\\\002 01-starting-project (2)\\\\01-starting-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n\n// import MoviesList from './components/MoviesList';\n// import './App.css';\n\n// function App() {\n//   const dummyMovies = [\n//     {\n//       id: 1,\n//       title: 'Some Dummy Movie',\n//       openingText: 'This is the opening text of the movie',\n//       releaseDate: '2021-05-18',\n//     },\n//     {\n//       id: 2,\n//       title: 'Some Dummy Movie 2',\n//       openingText: 'This is the second opening text of the movie',\n//       releaseDate: '2021-05-19',\n//     },\n//   ];\n\n//   const [moviesState, setMoviesState] = useState(dummyMovies)\n\n//   function fetchHandler () {\n//   fetch('https://swapi.dev/api/films/')\n//   .then((response)=>{\n//     // console.log(Response.json());\n//     return response.json();\n//   })\n//   .then((data)=>\n//   {\n//     // console.log(data)\n//     const transformedMovies = data.results.map(movieData => {\n//       return{\n//         id: movieData.episode_id,\n//         title: movieData.title,\n//         openingText: movieData.opening_crawl,\n//         releaseDate: movieData.release_data\n//       };\n\n//     })\n\n//     setMoviesState(transformedMovies);\n//   })\n// }\n\n//   return (\n//     <React.Fragment>\n//       <section>\n//         <button onClick={fetchHandler}>Fetch Movies</button>\n//       </section>\n//       <section>\n//         <MoviesList movies={moviesState} />\n//       </section>\n//     </React.Fragment>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const dummyMovies = [{\n    id: 1,\n    title: 'Some Dummy Movie',\n    openingText: 'This is the opening text of the movie',\n    releaseDate: '2021-05-18'\n  }, {\n    id: 2,\n    title: 'Some Dummy Movie 2',\n    openingText: 'This is the second opening text of the movie',\n    releaseDate: '2021-05-19'\n  }];\n  const [moviesState, setMoviesState] = useState(dummyMovies);\n  async function fetchHandler() {\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n      // if (!response.ok) {\n      //   throw new Error('Failed to fetch movies');\n      // }\n\n      console.log(response);\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_data\n        };\n      });\n      setMoviesState(transformedMovies);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: moviesState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"BrtFB/L5PJgxbMtJOXu8ZwYEQvw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MoviesList","jsxDEV","_jsxDEV","App","_s","dummyMovies","id","title","openingText","releaseDate","moviesState","setMoviesState","fetchHandler","response","fetch","console","log","data","json","transformedMovies","results","map","movieData","episode_id","opening_crawl","release_data","error","Fragment","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","movies","_c","$RefreshReg$"],"sources":["C:/sharpner react code/002 01-starting-project (2)/01-starting-project/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n\n// import MoviesList from './components/MoviesList';\n// import './App.css';\n\n// function App() {\n//   const dummyMovies = [\n//     {\n//       id: 1,\n//       title: 'Some Dummy Movie',\n//       openingText: 'This is the opening text of the movie',\n//       releaseDate: '2021-05-18',\n//     },\n//     {\n//       id: 2,\n//       title: 'Some Dummy Movie 2',\n//       openingText: 'This is the second opening text of the movie',\n//       releaseDate: '2021-05-19',\n//     },\n//   ];\n\n\n//   const [moviesState, setMoviesState] = useState(dummyMovies)\n\n//   function fetchHandler () {\n//   fetch('https://swapi.dev/api/films/')\n//   .then((response)=>{\n//     // console.log(Response.json());\n//     return response.json();\n//   })\n//   .then((data)=>\n//   {\n//     // console.log(data)\n//     const transformedMovies = data.results.map(movieData => {\n//       return{\n//         id: movieData.episode_id,\n//         title: movieData.title,\n//         openingText: movieData.opening_crawl,\n//         releaseDate: movieData.release_data\n//       };\n     \n//     })\n     \n//     setMoviesState(transformedMovies);\n//   })\n// }\n\n//   return (\n//     <React.Fragment>\n//       <section>\n//         <button onClick={fetchHandler}>Fetch Movies</button>\n//       </section>\n//       <section>\n//         <MoviesList movies={moviesState} />\n//       </section>\n//     </React.Fragment>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const dummyMovies = [\n    {\n      id: 1,\n      title: 'Some Dummy Movie',\n      openingText: 'This is the opening text of the movie',\n      releaseDate: '2021-05-18',\n    },\n    {\n      id: 2,\n      title: 'Some Dummy Movie 2',\n      openingText: 'This is the second opening text of the movie',\n      releaseDate: '2021-05-19',\n    },\n  ];\n\n  const [moviesState, setMoviesState] = useState(dummyMovies);\n\n  async function fetchHandler() {\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n      // if (!response.ok) {\n      //   throw new Error('Failed to fetch movies');\n      // }\n\n      console.log(response);\n      \n      const data = await response.json();\n\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_data\n        };\n      });\n\n      setMoviesState(transformedMovies);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        <MoviesList movies={moviesState} />\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,WAAW,GAAG,CAClB;IACEC,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,kBAAkB;IACzBC,WAAW,EAAE,uCAAuC;IACpDC,WAAW,EAAE;EACf,CAAC,EACD;IACEH,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,oBAAoB;IAC3BC,WAAW,EAAE,8CAA8C;IAC3DC,WAAW,EAAE;EACf,CAAC,CACF;EAED,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAACM,WAAW,CAAC;EAE3D,eAAeO,YAAYA,CAAA,EAAG;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;MAC5D;MACA;MACA;;MAEAC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;MAErB,MAAMI,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElC,MAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAACC,SAAS,IAAI;QACtD,OAAO;UACLhB,EAAE,EAAEgB,SAAS,CAACC,UAAU;UACxBhB,KAAK,EAAEe,SAAS,CAACf,KAAK;UACtBC,WAAW,EAAEc,SAAS,CAACE,aAAa;UACpCf,WAAW,EAAEa,SAAS,CAACG;QACzB,CAAC;MACH,CAAC,CAAC;MAEFd,cAAc,CAACQ,iBAAiB,CAAC;IACnC,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAACA,KAAK,CAAC;IACtB;EACF;EAEA,oBACExB,OAAA,CAACJ,KAAK,CAAC6B,QAAQ;IAAAC,QAAA,gBACb1B,OAAA;MAAA0B,QAAA,eACE1B,OAAA;QAAQ2B,OAAO,EAAEjB,YAAa;QAAAgB,QAAA,EAAC;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACV/B,OAAA;MAAA0B,QAAA,eACE1B,OAAA,CAACF,UAAU;QAACkC,MAAM,EAAExB;MAAY;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAErB;AAAC7B,EAAA,CAtDQD,GAAG;AAAAgC,EAAA,GAAHhC,GAAG;AAwDZ,eAAeA,GAAG;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}